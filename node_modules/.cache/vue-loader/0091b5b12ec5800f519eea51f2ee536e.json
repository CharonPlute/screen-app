{"remainingRequest":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/charon/Desktop/jing/code/screen-project/screen-app/src/views/operation-screen/AreaPassengerStat.vue?vue&type=style&index=0&id=6845b2be&lang=scss&scoped=true","dependencies":[{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/src/views/operation-screen/AreaPassengerStat.vue","mtime":1678099540516},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/css-loader/dist/cjs.js","mtime":1678071097229},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1678071098307},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/postcss-loader/src/index.js","mtime":1678071097872},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/sass-loader/dist/cjs.js","mtime":1678071117501},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/cache-loader/dist/cjs.js","mtime":1678071094995},{"path":"/Users/charon/Desktop/jing/code/screen-project/screen-app/node_modules/vue-loader-v16/dist/index.js","mtime":1678071098307}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hcmVhLXBhc3Nlbmdlci1zdGF0IHsKICBoZWlnaHQ6IDEwMCU7CiAgd2lkdGg6IDEwMCU7CiAgLmNvbnRlbnQgewogICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAzNHB4KTsKICAgIC5jaGFydCB7CiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgaGVpZ2h0OiAxMDAlOwogICAgfQogIH0KfQo="},{"version":3,"sources":["/Users/charon/Desktop/jing/code/screen-project/screen-app/src/views/operation-screen/AreaPassengerStat.vue"],"names":[],"mappings":";AAueA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACd;EACF;AACF","file":"/Users/charon/Desktop/jing/code/screen-project/screen-app/src/views/operation-screen/AreaPassengerStat.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"area-passenger-stat\">\n    <div class=\"content\">\n      <div class=\"chart\">\n        <jie-echarts\n          id=\"AreaPassengerStat\"\n          :style=\"chartStyle\"\n          :option=\"chartOption\"\n          v-if=\"customerBatteryCityData\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from \"vue\";\nimport useOptions from \"./use-options\";\nimport { tooltipObj } from \"@/utils/chart-options\";\nimport geoJson from \"@/assets/json/changsha.json\";\nimport { compare } from \"@/utils/common\";\nimport { areaPassenger } from \"@/api/operation-screen\";\nimport * as echarts from \"echarts\";\n\nexport default defineComponent({\n  name: \"area-passenger-stat\",\n  setup() {\n    const { screenDataType, chartStyle } = useOptions();\n    const tooltipBg = require(\"@/assets/images/screen/tooltip.png\");\n    const locationImg = require(\"@/assets/images/screen/location.png\");\n    let customerBatteryCityData: any[] = reactive([]);\n    const options: any = reactive({\n      geoCoordMap: {},\n      //地图颜色列表\n      mapColor: [\n        \"#F8503A\",\n        \"#F4B387\",\n        \"rgb(225,131,46)\",\n        \"rgb(231,210,99)\",\n        \"rgb(2,201,251)\",\n        \"rgb(231,210,99)\",\n        \"rgb(2,201,251)\",\n        \"#82D7ED\",\n        \"#5B8504\",\n        \"rgb(159,202,70)\",\n      ],\n      chartOption: {\n        tooltip: {\n          trigger: \"item\",\n          ...tooltipObj,\n          padding: 0,\n          backgroundColor: \"rgba(0,19,63,0.8)\",\n          // formatter: \"{a} <br/>{b} : {c}/位\"\n          formatter: function (params) {//params,ticket, callback\n            // console.log(\"params\", params);\n            //params.name name: \"临淄区\" seriesName: \"客流人次\"  value: 142\n            let htmlStr = `<div style=\" position: relative;height: 172px;width: 250px;\">\n        <img src=\"${tooltipBg}\" height: 172px;width: 250px;/>\n         <div style=\"position: absolute;top: 14px;left: 50%;transform: translateX(-50%); height: 150px;width: 200px;text-align: center;\">\n        <div style=\"color: rgba(247, 208, 0, 1);font-size: 25px;\">\n         <div style=\"display: flex;justify-content: center;align-items: center;\">\n          <img src=\"${locationImg}\" height:24px;width: 19px style=\"padding-right: 6px;\"/>${params.name}</div>\n         </div>\n         <div style=\"font-size: 32px;color: #FFFFFF; padding-top: 45px;\">${params.value}</div>\n         <div style=\" padding-top: 25px;font-size: 14px;\">${params.seriesName}</div>\n         </div>\n        </div>`;\n            return htmlStr;\n          },\n        },\n        // 是视觉映射组件，用于进行『视觉编码』，也就是将数据映射到视觉元素（视觉通道）\n        visualMap: {\n          // show:false,\n          left: \"2%\",\n          type: \"piecewise\", // 类型为分段型\n          seriesIndex: [0, 1], //指定取哪个系列的数据\n          min: 0,\n          max: 100,\n          realtime: false,\n          calculable: true,\n          // inRange: { color: [\"#F4B387\"]},\n          splitNumber: 7, //平均分层\n          pieces: [\n            { gt: 400000, color: \"#F8503A\" },\n            { gt: 300000, lte: 350000, color: \"#F4B387\" },\n            { gt: 250000, lte: 300000, color: \"rgb(225,131,46)\" },\n            { gt: 200000, lte: 250000, color: \"rgb(231,210,99)\" },\n            { gt: 150000, lte: 200000, color: \"rgb(2,201,251)\" },\n            { gt: 100000, lte: 150000, color: \"#82D7ED\" },\n            { gt: 50000, lte: 100000, color: \"#5B8504\" },\n            { gte: 0, lte: 50000, color: \"rgb(159,202,70)\" },\n          ],\n          textStyle: {\n            color: \"#fff\",\n          },\n          itemWidth: \"15\",\n          // text: [\"高\", \"低\"],\n          dimension: 0, //指定用数据的『哪个维度』，映射到视觉元素上。\n        },\n        grid: {\n          x: \"8%\",\n          y: \"10%\",\n          top: \"30px\",\n          width: \"14%\",\n          height: \"50%\",\n        },\n        xAxis: {\n          gridIndex: 0,\n          axisTick: {\n            show: false,\n          },\n          axisLabel: {\n            show: false,\n          },\n          splitLine: {\n            show: false,\n          },\n          axisLine: {\n            show: false,\n          },\n        },\n        yAxis: {\n          gridIndex: 0,\n          interval: 0,\n          data: [], //yname,\n          axisTick: {\n            show: true,\n          },\n          splitLine: {\n            show: false,\n          },\n          //刻度线样式\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: \"#03a9f4\",\n            },\n          },\n          //刻度文本样式\n          axisLabel: {\n            show: true,\n            color: \"rgba(170, 170, 170, 1)\",\n            fontSize: \"12\",\n          },\n        },\n        //geo地图配置\n        geo: [\n          {\n            map: \"changsha\",\n            aspectScale: 0.9,\n            roam: true, // 是否允许缩放\n            zoom: 1, // 默认显示级别\n            layoutSize: \"95%\",\n            layoutCenter: [\"55%\", \"50%\"],\n            label: {\n              show: true,\n              color: \"#fff\",\n            },\n            itemStyle: {\n              areaColor: {\n                type: \"linear-gradient\",\n                x: 0,\n                y: 400,\n                x2: 0,\n                y2: 0,\n                colorStops: [\n                  {\n                    offset: 0,\n                    color: \"rgba(37,108,190,0.3)\", // 0% 处的颜色\n                  },\n                  {\n                    offset: 1,\n                    color: \"rgba(15,169,195,0.3)\", // 50% 处的颜色\n                  },\n                ],\n                global: true, // 缺省为 false\n              },\n              borderColor: \"#4ecee6\",\n              borderWidth: 1,\n            },\n            // 高亮状态下的多边形和标签样式。\n            emphasis: {\n              itemStyle: {\n                areaColor: \"#0160AD\",//地图区域的颜色。\n              },\n              label: {\n                show: true,//是否显示标签。\n                color: \"#fff\",\n              },\n            },\n            zlevel: 3,\n          },\n        ],\n        series: [],\n      },\n    });\n    //初始化地图的配置项\n    function initMapOption() {\n      options.geoCoordMap = {};\n      geoJson.features.map((m) => {\n        options.geoCoordMap[m.properties.name] = m.properties.center;\n      });\n      console.log(\"geoCoordMap\", JSON.stringify(options.geoCoordMap));\n    }\n    //初始化数据\n    function initData() {\n      areaPassenger({ type: screenDataType.value }).then((res) => {\n        const data = res.data.data;\n        refreshData(data);\n        // initMapColor(max,min);\n        // console.log(\"options.chartOption\", JSON.stringify(options.chartOption));\n      });\n    }\n    // //构造地图颜色\n    // function initMapColor(max, min) {\n    //   if (max > 50000) {\n    //     let num = Math.trunc(max / 50000);\n    //     let colors: string[] = [];\n    //     for (let i = 0; i < num; i++) {\n    //       colors[i] = i > 10 ? options.mapColor[i - 10] : options.mapColor[i];\n    //     }\n    //     options.chartOption.visualMap.inRange.color = colors;\n    //     // options.chartOption.series[1].color=colors;\n    //   } else {\n    //     options.chartOption.visualMap.inRange.color = [options.mapColor[0]];\n    //   }\n    // }\n    // 动态计算柱形图的高度（定一个max）\n    function lineMaxHeight() {\n      const maxValue = Math.max(\n        ...customerBatteryCityData.map((item) => item.value)\n      );\n      console.log(\"0.9/maxValue\", 9 / maxValue);\n      return 0.1 / maxValue;\n    }\n    // 柱状体的主干\n    function lineData() {\n      return customerBatteryCityData.map((item) => {\n        return {\n          coords: [\n            options.geoCoordMap[item.name],\n            [\n              options.geoCoordMap[item.name][0],\n              options.geoCoordMap[item.name][1] + item.value * lineMaxHeight(),\n            ],\n          ],\n        };\n      });\n    }\n    // 柱状体的顶部\n    function scatterData() {\n      return customerBatteryCityData.map((item) => {\n        return [\n          options.geoCoordMap[item.name][0],\n          options.geoCoordMap[item.name][1] + item.value * lineMaxHeight(),\n        ];\n      });\n    }\n    // 柱状体的底部\n    function scatterDataBottom() {\n      return customerBatteryCityData.map((item) => {\n        return {\n          name: item.name,\n          value: options.geoCoordMap[item.name],\n        };\n      });\n    }\n    initMapOption();\n    initData();\n    console.log(\"echarts\", echarts);\n    if (echarts) {\n      // @ts-ignore\n      echarts.registerMap(\"changsha\", geoJson); //注册地图\n    }\n    //刷新数据\n    function refreshData(data) {\n      if (data) {\n        customerBatteryCityData = data;\n      }\n      const descData = data.sort(compare(\"value\", \"up\"));\n      console.log(\"descData\", descData);\n      let seriesdata = [\n        //客流量\n        {\n          z: 0,\n          geoIndex: 0,\n          showLegendSymbol: true,\n          // left: \"20%\",\n          name: \"客流人次\",\n          type: \"map\",\n          aspectScale: 0.75, //长宽比\n          map: \"changsha\",\n          // zoom: 1, //当前视角的缩放比例\n          roam: true, //是否开启平游或缩放\n          scaleLimit: {\n            //滚轮缩放的极限控制\n            min: 1,\n            max: 2,\n          },\n          label: {\n            show: true,\n          },\n          data: data,\n        },\n        // 右边图表客流量\n        {\n          z: 1,\n          name: \"客流人次\",\n          type: \"bar\",\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          barWidth: \"35%\",\n          color: [],\n          itemStyle: {\n            color: \"#fff\",\n          },\n          emphasis: {\n            itemStyle: {\n              areaColor: \"#2AB8FF\",\n              borderWidth: 0,\n              color: \"#03EAFF\",\n            },\n          },\n          label: {\n            show: true,\n            position: \"right\",\n            color: \"white\",\n          },\n          data: descData, //data\n        },\n        // 用于带有起点和终点信息的线数据的绘制，主要用于地图上的航线，路线的可视化。\n        {\n          z: 2,\n          type: \"lines\",\n          zlevel: 5,\n          effect: {\n            show: false,\n            // period: 4, //箭头指向速度，值越小速度越快\n            // trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重\n            // symbol: 'arrow', //箭头图标\n            // symbol: imgDatUrl,\n            symbolSize: 5, // 图标大小\n          },\n          lineStyle: {\n            width: 17, // 尾迹线条宽度\n            color: {\n              type: \"linear\",\n              x: 0,\n              y: 0,\n              x2: 1,\n              y2: 0,\n              colorStops: [\n                {\n                  offset: 0,\n                  color: \"rgb(199,145,41)\", // 0% 处的颜色\n                },\n                {\n                  offset: 0.5,\n                  color: \"rgb(199,145,41)\", // 0% 处的颜色\n                },\n                {\n                  offset: 0.5,\n                  color: \"rgb(223,176,32)\", // 0% 处的颜色\n                },\n                {\n                  offset: 1,\n                  color: \"rgb(223,176,32)\", // 0% 处的颜色\n                },\n                {\n                  offset: 1,\n                  color: \"rgb(199,145,41)\", // 100% 处的颜色\n                },\n              ],\n              global: false, // 缺省为 false\n            },\n            opacity: 1, // 尾迹线条透明度\n            curveness: 0, // 尾迹线条曲直度\n          },\n          label: {\n            show: 0,\n            position: \"end\",\n            formatter: \"245\",\n          },\n          silent: true,\n          data: lineData(),\n        },\n        {\n          z: 3,\n          type: \"scatter\",\n          coordinateSystem: \"geo\",\n          geoIndex: 0,\n          zlevel: 5,\n          label: {\n            // show: true,\n            position: \"bottom\",\n            // formatter: params =>options.data[params.dataIndex].value,\n            padding: [4, 8],\n            backgroundColor: \"#003F5E\",\n            borderRadius: 5,\n            borderColor: \"#67F0EF\",\n            borderWidth: 1,\n            color: \"#67F0EF\",\n          },\n          symbol: \"diamond\",\n          symbolSize: [17, 8],\n          itemStyle: {\n            color: \"#ffd133\",\n            opacity: 1,\n          },\n          silent: true,\n          data: scatterData(),\n        },\n        {\n          z: 2,\n          type: \"scatter\",\n          coordinateSystem: \"geo\",\n          geoIndex: 0,\n          zlevel: 4,\n          label: {\n            formatter: \"{b}\",\n            position: \"bottom\",\n            color: \"#fff\",\n            fontSize: 12,\n            distance: 10,\n            // show: true\n          },\n          symbol: \"diamond\",\n          symbolSize: [17, 8],\n          itemStyle: {\n            // color: '#F7AF21',\n            color: {\n              type: \"linear\",\n              x: 0,\n              y: 0,\n              x2: 1,\n              y2: 0,\n              colorStops: [\n                {\n                  offset: 0,\n                  color: \"rgb(199,145,41)\", // 0% 处的颜色\n                },\n                {\n                  offset: 0.5,\n                  color: \"rgb(199,145,41)\", // 0% 处的颜色\n                },\n                {\n                  offset: 0.5,\n                  color: \"rgb(223,176,32)\", // 0% 处的颜色\n                },\n                {\n                  offset: 1,\n                  color: \"rgb(223,176,32)\", // 0% 处的颜色\n                },\n                {\n                  offset: 1,\n                  color: \"rgb(199,145,41)\", // 100% 处的颜色\n                },\n              ],\n              global: false, // 缺省为 false\n            },\n            opacity: 1,\n          },\n          silent: true,\n          data: scatterDataBottom(),\n        },\n      ];\n      const yname: any[] = [];\n      const valList: any[] = []; //值列表\n      for (let i = 0; i < data.length; i++) {\n        yname.push(data[i].name);\n        valList.push(data[i].value);\n      }\n      options.chartOption.yAxis.data = yname;\n      options.chartOption.series = seriesdata;\n\n      // 求最大值、最小值\n      let max = Math.max(...valList);\n      let min = Math.min(...valList);\n      options.chartOption.visualMap.max = max;\n      options.chartOption.visualMap.min = min;\n    }\n    return { chartStyle, ...toRefs(options), customerBatteryCityData ,initData};\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.area-passenger-stat {\n  height: 100%;\n  width: 100%;\n  .content {\n    height: calc(100% - 34px);\n    .chart {\n      position: relative;\n      height: 100%;\n    }\n  }\n}\n</style>\n"]}]}