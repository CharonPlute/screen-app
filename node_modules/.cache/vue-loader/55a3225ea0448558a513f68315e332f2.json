{"remainingRequest":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/views/operation-screen/CardTypeUse.vue?vue&type=template&id=136ef48d&scoped=true","dependencies":[{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/views/operation-screen/CardTypeUse.vue","mtime":1671064436000},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1678071098307},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/cache-loader/dist/cjs.js","mtime":1678071094995},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/index.js","mtime":1678071098307}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iY2FyZC10eXBlLXVzZSI+CiAgICA8amllLWhlYWRlciA6dGl0bGU9ImN1clRpdGxlIj48L2ppZS1oZWFkZXI+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgPGRpdiBjbGFzcz0iY2hhcnQiPgogICAgICAgIDxqaWUtZWNoYXJ0cyBpZD0iQ3VyQ2FyZFR5cGVVc2UiIDpzdHlsZT0iY2hhcnRTdHlsZSIgOm9wdGlvbj0iY2hhcnRPcHRpb24iIC8+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/views/operation-screen/CardTypeUse.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC9E,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/views/operation-screen/CardTypeUse.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"card-type-use\">\n    <jie-header :title=\"curTitle\"></jie-header>\n    <div class=\"content\">\n      <div class=\"chart\">\n        <jie-echarts id=\"CurCardTypeUse\" :style=\"chartStyle\" :option=\"chartOption\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs, onMounted, computed } from \"vue\";\nimport { deepCopy, getDataNameByType, getColorByIndex } from \"@/utils/common\";\nimport { baseInfoCircleNormalOption } from \"@/utils/chart-options\";\nimport { cardUseRatio } from \"@/api/operation-screen\";\nimport useOptions from \"./use-options\";\nexport default defineComponent({\n  name: \"card-type-use\",\n  props: {\n    title: {\n      type: String,\n    },\n  },\n  setup(props) {\n    const colorArr = [\n      { start: \"#ffa300\", end: \"#fffb00\" },\n      { start: \"#0b69ff\", end: \"#0bd6ff\" },\n      { start: \"#7334ff\", end: \"#b87eff\" },\n      { start: \"lightgreen\", end: \"green\" },\n      { start: \"#EF1850\", end: \"#FF7095\" },\n    ];\n    const { screenDataType, getTitle, chartStyle } = useOptions();\n    const options = reactive({\n      chartOption: deepCopy(baseInfoCircleNormalOption),\n    });\n    //初始化数据\n    function initData() {\n      cardUseRatio({ type: screenDataType.value }).then((res) => {\n        const data = res.data.data;\n        refreshData(data);\n      });\n    }\n    //格式化echart配置项\n    function formatChart(data) {\n      options.chartOption.color = [\n        getColorByIndex(colorArr, 0),\n        getColorByIndex(colorArr, 1),\n        getColorByIndex(colorArr, 2),\n        getColorByIndex(colorArr, 3),\n        getColorByIndex(colorArr, 4),\n      ];\n      options.chartOption.series[0].data = data.seriesData;\n      options.chartOption.legend.data = data.seriesData.map((m) => {\n        return m.name;\n      });\n      let total = 0;\n      data.seriesData.forEach((n) => {\n        total += n.value;\n      });\n      options.chartOption.title.subtext=total;\n      options.chartOption.legend.formatter = (name) => {\n        let paramsStr;\n        for (let i = 0; i < data.seriesData.length; i++) {\n          if (data.seriesData[i].name == name) {\n            paramsStr =\n              ((data.seriesData[i].value / total) * 100).toFixed(2) + \"%\";\n          }\n        }\n        let arr = [name + \"：\", paramsStr];\n        return arr.join(\"\");\n      };\n      options.chartOption.tooltip.formatter = (datas) => {\n        let res = `${datas.name}<br/>`;\n        // 如果不为空 ，那么拼接实际的信息\n        if (datas.value !== \"null\") {\n          res += `${datas.marker}金额：${datas.value}，百分比：${datas.percent}%<br/>`;\n        }\n        return res;\n      };\n    }\n    onMounted(() => {\n      initData();\n    });\n    const curTitle = computed(() => {\n      return getDataNameByType(screenDataType.value) + getTitle(props);\n    });\n    //刷新数据\n    function refreshData(data) {\n      if (data) {\n        formatChart(data);\n      }\n    }\n    return {\n      ...toRefs(options),\n      curTitle,\n      screenDataType,\n      chartStyle,\n      initData,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.card-type-use {\n  height: 100%;\n  .content {\n    height: calc(100% - 34px);\n    .chart {\n      position: relative;\n      height: 100%;\n    }\n  }\n}\n</style>\n"]}]}