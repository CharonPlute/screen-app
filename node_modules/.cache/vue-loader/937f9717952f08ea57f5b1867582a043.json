{"remainingRequest":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/components/echarts/index.vue?vue&type=template&id=5ece357f","dependencies":[{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/components/echarts/index.vue","mtime":1671064436000},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1678071098307},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/cache-loader/dist/cjs.js","mtime":1678071094995},{"path":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/node_modules/vue-loader-v16/dist/index.js","mtime":1678071098307}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPCEtLSDmr4/kuIDkuKrlm77ooajpg73mnInoh6rlt7HllK/kuIDnmoRpZCzpnIDopoHliqjmgIHkvKDlhaXjgIIgLS0+CiAgPGRpdiA6aWQ9ImlkIiA6Y2xhc3M9Im15Y2xhc3MiIDpzdHlsZT0ibXlTdHlsZSIgLz4K"},{"version":3,"sources":["/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/components/echarts/index.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC","file":"/Users/charon/Desktop/阿京/代码/vue3_book_codes-main/codes/chapter9/screen-app/src/components/echarts/index.vue","sourceRoot":"","sourcesContent":["<template>\n  <!-- 每一个图表都有自己唯一的id,需要动态传入。 -->\n  <div :id=\"id\" :class=\"myclass\" :style=\"myStyle\" />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, watch, toRef } from \"vue\"; //\"@vue/composition-api\";\nimport { guid } from \"@/utils/common\";\nimport { EleResize } from \"@/utils/esresize.js\";\nimport { init } from \"echarts\";\n\nexport default defineComponent({\n  name: \"jie-echarts\",\n  props: {\n    //id标识，唯一\n    id: {\n      type: String,\n      default: guid(),\n    },\n    //图表宽度\n    width: {\n      type: String,\n      default: \"100%\",\n    },\n    //图表高度\n    height: {\n      type: String,\n      default: \"220px\",\n    },\n    //指定class样式名称\n    class: {\n      type: String,\n      default: \"echarts-line\",\n    },\n    //echarts配置项\n    option: {\n      type: Object,\n      default: () => {},\n    },\n    //style样式对象\n    style: {\n      type: Object,\n      default: () => {},\n    },\n    //是否加载中\n    loading: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props: any, { emit }) {\n    let MyEcharts: any = null; // echarts实例\n    // 组件初始化\n    const InitCharts = () => {\n      let dom = document.getElementById(props.id);\n      MyEcharts = init(dom as HTMLDivElement);\n      if (props.loading == true) {\n        showLoading();\n      }\n      /**\n       * 此方法适用于所有项目的图表，但是每个配置都需要在父组件传进来，相当于每个图表的配置都需要写一遍，不是特别的省代码，主要是灵活度高\n       * echarts的配置项，你可以直接在外边配置好，直接扔进来一个this.option\n       */\n      MyEcharts.clear(); // 适用于大数据量的切换时图表绘制错误,先清空在重绘\n      MyEcharts.setOption(props.option, true); // 设置为true可以是图表切换数据时重新渲染\n      MyEcharts.on(\"click\", function (params: any) {\n        mapClick(params);\n      });\n      //不加这代码，图表初始化展示会有问题\n      setTimeout(() => {\n        MyEcharts.resize();\n      });\n      // // 当窗口变化时随浏览器大小而改变-有缺陷\n      // window.onresize = () => {\n      //  MyEcharts.resize();\n      //     console.log('变化window');\n      //   // MyEcharts.resize({ height: this.height });\n      // };\n      //在div上绑定对应onresize 方法\n      EleResize.on(dom, () => {\n        // eslint-disable-line\n        console.log(\"变化EleResize\");\n        MyEcharts.resize();\n      });\n    };\n    //组件单击事件\n    const mapClick = (params: any) => {\n      emit(\"eclick\", params);\n    };\n    const showLoading = () => {\n      if (MyEcharts) {\n        MyEcharts.showLoading({\n          text: \"loading\",\n          // color: '#4cbbff',\n          // textColor: '#4cbbff',\n        });\n      }\n    };\n    const hideLoading = () => {\n      if (MyEcharts) {\n        MyEcharts.hideLoading();\n      }\n    };\n    onMounted(() => {\n      InitCharts();\n    });\n    watch(\n      ()=>props.option,\n      (newVal, oldVal) => {\n        if (MyEcharts) {\n          if (newVal) {\n            MyEcharts.setOption(newVal, true);\n          } else {\n            MyEcharts.setOption(oldVal, true);\n          }\n        } else {\n          InitCharts();\n        }\n      },\n      {\n        deep: true, // 是否是深度监视, 默认是false\n      }\n    );\n    watch(()=>props.loading, () => {\n      props.loading === true ? showLoading() : hideLoading();\n    });\n    const myclass = toRef(props, \"class\");\n    const myStyle = toRef(props, \"style\");\n    return { MyEcharts, myclass, myStyle };\n  },\n});\n</script>\n\n<style scoped></style>\n"]}]}